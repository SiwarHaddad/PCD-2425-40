package com.pcd.report.controller;

import com.pcd.report.dto.*;
import com.pcd.report.service.PdfGenerationService;
import com.pcd.report.service.ReportComparisonService;
import com.pcd.report.service.ReportService;
import com.pcd.report.service.ReportVersioningService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/v1/reports")
@RequiredArgsConstructor
public class ReportController {

    private final ReportService reportService;
    private final ReportComparisonService reportComparisonService;
    private final PdfGenerationService pdfGenerationService;
    private  final ReportVersioningService reportVersioningService;

    @PostMapping
    public ResponseEntity<ReportResponse> createReport(@RequestBody ReportRequest request) throws IOException {
        ReportResponse response = reportService.createReport(request);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{reportId}")
    public ResponseEntity<ReportResponse> getReport(@PathVariable String reportId) {
        ReportResponse report = reportService.getReport(reportId);
        return ResponseEntity.ok(report);
    }


    @GetMapping("/auto-generated/{imageId}")
    public ResponseEntity<List<ReportResponse>> getAutoGenerated(@PathVariable String imageId) {
        List<ReportResponse> reports = reportService.getAutoGenerated(imageId);
        return ResponseEntity.ok(reports);
    }

    @GetMapping("/case/{caseId}")
    public ResponseEntity<List<ReportResponse>> getReportsByCase(@PathVariable String caseId) {
        List<ReportResponse> reports = reportService.getReportsByCase(caseId);
        return ResponseEntity.ok(reports);
    }


    @GetMapping("/export/{reportId}")
    public ResponseEntity<byte[]> exportReport(@PathVariable String reportId) throws IOException {
        byte[] report = reportService.exportReport(reportId);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_PDF);
        headers.setContentDispositionFormData("attachment", "report-" + reportId + ".pdf");

        return ResponseEntity.ok()
                .headers(headers)
                .body(report);
    }

    @GetMapping("/expert/{expertId}")
    public ResponseEntity<List<ReportResponse>> getReportsByExpert(@PathVariable String expertId) {
        List<ReportResponse> report = reportService.getExpertReport(expertId);
        return ResponseEntity.ok()
                .body(report);
    }


    @GetMapping("/compare")
    public ResponseEntity<ReportComparisonResultDTO> compareReports(
            @RequestParam String reportId1,
            @RequestParam String reportId2) {
        ReportComparisonResultDTO result = reportComparisonService.compareReports(reportId1, reportId2);
        return ResponseEntity.ok(result);
    }

    @PostMapping("/{reportId}/version")
    public ResponseEntity<ReportResponse> createNewVersion(
            @PathVariable String reportId,
            @RequestParam String reason) {
        ReportResponse newVersion = reportVersioningService.createNewVersion(reportId, reason);
        return ResponseEntity.ok(newVersion);
    }


}
